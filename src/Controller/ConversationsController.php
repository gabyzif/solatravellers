<?php
namespace App\Controller;
use Cake\Event\Event;
use Cake\I18n\Time;

use App\Controller\AppController;

/**
 * Conversations Controller
 *
 * @property \App\Model\Table\ConversationsTable $Conversations
 *
 * @method \App\Model\Entity\Conversation[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ConversationsController extends AppController
{
    public function beforeFilter(Event $event)
    {
        $this->viewBuilder()->setLayout('forum');
        return parent::beforeFilter($event); // TODO: Change the autogenerated stub


    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $this->loadModel('Users');
        $this->loadModel('UserGroups');
        $this->loadModel('Conversations');
        $this->loadModel('Tgroups');

        $conversations = $this->Conversations->find()
            ->contain("Tgroups")
            ->contain("Users");


        //----------------- My conversations-----------

        $my_conversations = $this->Conversations->find()
            ->contain("Tgroups")
            ->contain("Users")
            ->where(["Users.id" => $this->User->id]);


        if($my_conversations->isEmpty()) {
            $is_empty_conv=true;
        }




        $this->set(compact('conversations','is_empty_conv','my_conversations'));
    }

    /**
     * View method
     *
     * @param string|null $id Conversation id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {

        $this->loadModel("Comments");

        $conversation = $this->Conversations->get($id,[
            'contain'=>["Tgroups","Users","Comments"=>"Users"],
            ]);



        $conversations = $this->Conversations->find()
            ->where(["conversations.Id"=>$id])
            ->contain(["Users"]);

        $comments = $this->Comments->find()
            ->where(["state"=>"ready"])
            ->contain(["Users"]);

        $is_in_conv = false;


            if($conversation->user_id==$this->User->id){
                $is_in_conv=true;


            }



        $comment = $this->Comments->newEntity();


        $this->set(compact('conversation','users','conversations','is_in_conv','id','comment','comments'));
    }


    public function addComment()
    {
        $this->loadModel("Comments");

        $comment = $this->Comments->newEntity();

        if ($this->request->is(array('post','put'))) {

            $comment = $this->Comments->patchEntity($comment, $this->request->getData());


            $comment->date= Time::now();
            $comment->state="send";

            if ($this->Comments->save($comment)) {

                $this->Flash->success(__('The conversation has been saved.'));

                return $this->redirect(['action' => 'view/'.$comment->conversation_id]);
            }
            $this->Flash->error(__('The conversation could not be saved. Please, try again.'));
        }


        $this->set(compact('comment'));
    }




    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $conversation = $this->Conversations->newEntity();
        if ($this->request->is('post')) {
            $conversation = $this->Conversations->patchEntity($conversation, $this->request->getData());
            if ($this->Conversations->save($conversation)) {
                $this->Flash->success(__('The conversation has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The conversation could not be saved. Please, try again.'));
        }
        $photos = $this->Conversations->Photos->find('list', ['limit' => 200]);
        $users = $this->Conversations->Users->find('list', ['limit' => 200]);
        $categories = $this->Conversations->Categories->find('list', ['limit' => 200]);
        $tgroups = $this->Conversations->Tgroups->find('list', ['limit' => 200]);
        $this->set(compact('conversation', 'photos', 'users', 'categories', 'tgroups'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Conversation id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $conversation = $this->Conversations->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $conversation = $this->Conversations->patchEntity($conversation, $this->request->getData());
            if ($this->Conversations->save($conversation)) {
                $this->Flash->success(__('The conversation has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The conversation could not be saved. Please, try again.'));
        }
        $photos = $this->Conversations->Photos->find('list', ['limit' => 200]);
        $users = $this->Conversations->Users->find('list', ['limit' => 200]);
        $categories = $this->Conversations->Categories->find('list', ['limit' => 200]);
        $tgroups = $this->Conversations->Tgroups->find('list', ['limit' => 200]);
        $this->set(compact('conversation', 'photos', 'users', 'categories', 'tgroups'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Conversation id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $conversation = $this->Conversations->get($id);
        if ($this->Conversations->delete($conversation)) {
            $this->Flash->success(__('The conversation has been deleted.'));
        } else {
            $this->Flash->error(__('The conversation could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
