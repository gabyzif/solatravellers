<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\Event\Event;
use App\Model\Table\UserGroupsTable;
use App\Model\Table\UsersTable;



/**
 * Tgroups Controller
 *
 * @property \App\Model\Table\TgroupsTable $Tgroups
 * * @property \App\Model\Table\UserGroupsTable $userGroup

 * @method \App\Model\Entity\Tgroup[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class TgroupsController extends AppController
{
    public function beforeFilter(Event $event)
    {
        $this->viewBuilder()->setLayout('forum');
        return parent::beforeFilter($event); // TODO: Change the autogenerated stub


    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $this->loadModel('Users');
        $this->loadModel('UserGroups');
        $this->loadModel('Conversations');
        $this->loadModel('Tgroups');


        $user_id= $this->User->id;
        $is_empty=false;


        $tgroups = $this->paginate($this->Tgroups->find()
            ->contain(['UserGroups'])
            ->contain(['Photos']));



       //--------------- My Groups --------------------

        $my_groups= $this->UserGroups->find()
            ->contain(["Tgroups"=>"Photos"])
            ->matching("Users")
            ->where(["Users.id" => $user_id]);

        if($my_groups->isEmpty()) {
            $is_empty=true;
        }


        //----------------- My conversations-----------

        $my_conversations = $this->Conversations->find()
            ->contain("Tgroups")
            ->contain("Users")
            ->where(["Users.id" => $user_id]);


        if($my_conversations->isEmpty()) {
            $is_empty_conv=true;
        }



       //------------------------Cant Users------------------

        foreach ($tgroups as $tgroup){
            $cant_users[$tgroup->id] = $this->UserGroups->find()
                ->where(['group_id' => $tgroup->id])
                ->count();

            //---------------------Cant Posts-------------------
            $cant_posts[$tgroup->id] =$this->Conversations->find()
                ->where(['tgroup_id' => $tgroup->id])
                ->count();
        }

        //------------------conversations---------------------------

        $conversations = $this->Conversations->find()
            ->contain("Tgroups")
            ->contain("Users");

        foreach ($conversations as $conv){
            $cant_users_conv[$conv->id] = $this->Conversations->find()
                ->where(['user_id' => $conv->id_user])
                ->count();
        }



        $this->set(compact('tgroups','my_groups','cant_users', 'cant_posts','conversations','user_id','is_empty','my_conversations','is_empty_conv','cant_users_conv'));

    }

    /**
     * View method
     *
     * @param string|null $id Tgroup id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $this->loadModel('Conversations');
        $this->loadModel('UserGroups');
        $this->loadModel('Photos');
        $this->loadModel('Users');



        $is_in_group=false;



        $tgroup = $this->Tgroups->get($id,[
            'contain' => ['UserGroups', 'Photos']

        ]);

        $cant_users = $this->UserGroups->find()
            ->where(['group_id' => $tgroup->id])
            ->count();

        $conversations = $this->Conversations->find()
            ->contain("Tgroups")
            ->contain("Users")
            ->where(["Conversations.tgroup_id" => $id]);

        $users_group = $this->UserGroups->find()
            ->contain (["Users"])
            ->where(['group_id' => $tgroup->id]);





        foreach ($tgroup->user_groups as $user_gr){

            if($user_gr->user_id==$this->User->id){
             $is_in_group=true;


            }


        }



        $userGroup = $this->UserGroups->newEntity();


        $this->set(compact('userGroup','tgroup', 'conversations', 'cant_users','is_in_group', 'users', 'users_group','comment'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $tgroup = $this->Tgroups->newEntity();
        if ($this->request->is('post')) {
            $tgroup = $this->Tgroups->patchEntity($tgroup, $this->request->getData());
            if ($this->Tgroups->save($tgroup)) {
                $this->Flash->success(__('The tgroup has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The tgroup could not be saved. Please, try again.'));
        }
        $this->set(compact('tgroup'));
    }

   


    public function joinGroup(){

        $this->loadModel('UserGroups');
        $this->loadModel('Tgroups');
        $this->loadModel('Users');


        $userGroup = $this->UserGroups->newEntity();

        if ($this->request->is('post')) {
            $userGroup = $this->UserGroups->patchEntity($userGroup, $this->request->getData());

            $userGroup->user_id=$this->User->id;

            if ($this->UserGroups->save($userGroup)) {

                $this->Flash->success(__('The user group has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user group could not be saved. Please, try again.'));
        }

        $this->set(compact('userGroup'));


    }

    /**
     * Edit method
     *
     * @param string|null $id Tgroup id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */


    public function edit($id = null)
    {
        $tgroup = $this->Tgroups->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $tgroup = $this->Tgroups->patchEntity($tgroup, $this->request->getData());
            if ($this->Tgroups->save($tgroup)) {
                $this->Flash->success(__('The tgroup has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The tgroup could not be saved. Please, try again.'));
        }
        $this->set(compact('tgroup'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Tgroup id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $tgroup = $this->Tgroups->get($id);
        if ($this->Tgroups->delete($tgroup)) {
            $this->Flash->success(__('The tgroup has been deleted.'));
        } else {
            $this->Flash->error(__('The tgroup could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
