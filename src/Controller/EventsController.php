<?php
namespace App\Controller;
use App\Model\Entity\City;
use Cake\Event\Event;


use App\Controller\AppController;

/**
 * Events Controller
 *
 * @property \App\Model\Table\EventsTable $Events
 *
 * @method \App\Model\Entity\Event[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class EventsController extends AppController
{

    public function initialize()
    {
        parent::initialize();
        $this->loadComponent('RequestHandler');

        if ($this->request->is('json')) {
            $this->Auth->allow('jason');
        }

        $this->loadComponent('Search.Prg', [
            // This is default config. You can modify "actions" as needed to make
            // the PRG component work only for specified methods.
            'actions' => ['index', 'lookup']
        ]);

    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */

    public function beforeFilter(Event $event)
    {
        $this->viewBuilder()->setLayout('forum');
        return parent::beforeFilter($event); // TODO: Change the autogenerated stub



    }

    public function jason(){

            $events = $this->paginate($this->Events->find()
                ->contain(['City'])
                ->contain(['Photos']));

            $this->set(compact('events'));

    }

    public function index()
    {


        $this->loadModel('Users');
        $this->loadModel('UsersEvents');
        $this->loadModel("Citys");

        $is_empty=false;


        $city = $this->request->getQuery('city_id');

        if(isset($city)){


            $events = $this->paginate($this->Events->find()
                ->contain(["City"])
                ->where(["city_id" => $city]));


        }
        else {
            $events = $this->paginate($this->Events
                ->find()
                ->contain(['City'])
                ->where(['description IS NOT' => null]));

        }



        $this->set([
            'events' => $events,
            '_serialize' => ['events']
        ]);



        $my_events= $this->UsersEvents->find()
            ->contain(["Events"])
            ->contain(["Users"])
            ->where(["Users.id" => $this->User->id]);

        if($my_events->isEmpty()) {

            $is_empty=true;

        }

        foreach ($events as $event){
            $cant_users[$event->id] = $this->UsersEvents->find()
                ->where(['event_id' => $event->id])
                ->count(); }

        $citys = $this->Events->City->find('list', ['limit' => 200]);


        $this->set(compact('events','cant_users', 'my_events','is_empty','citys','city','event_filtered'));
    }

    /**
     * View method
     *
     * @param string|null $id Event id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */

    public function search(){

        $this->loadModel('Users');
       // $this->loadModel('Photos');
        $this->loadModel('Citys');

        $city = $this->request->getQuery('city_id');
       // $date = $this->request->getQuery('date');

      //  $date=$date['year']."-".$date['month']."-".$date["day"];

        if(isset($city)){
            $event= $this->Events->find()
                ->contain(["City"])
                ->where(["city_id" => $city]);
        }

         //   ->where(["date"=>$date]);


       /* $event = $this->Events->get([
            'contain' => ['Photos', 'Users','City']
        ]);*/

        $this->set(compact('event', 'city'));

    }
    public function view($id = null)
    {

        $this->loadModel('UsersEvents');
        $this->loadModel('Users');
      //  $this->loadModel('Photos');
        $this->loadModel('Citys');


        $event = $this->Events->get($id, [
            'contain' => ['Users','City']
        ]);

        $cant_users = $this->UsersEvents->find()
            ->where(['event_id' => $event->id])
            ->count();

        $users_events = $this->UsersEvents->find()
            ->contain (["Users"])
            ->where(['event_id' => $event->id]);





        $is_in_event=false;


        foreach ($users_events as $user_ev){

            if($user_ev->user_id==$this->User->id){
                $is_in_event=true;


            }


        }



        $userEvent = $this->UsersEvents->newEntity();

        $this->set(compact('event',  'cant_users','users_events','is_in_event','userEvent'));
    }


    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $event = $this->Events->newEntity();
        if ($this->request->is('post')) {
            $event = $this->Events->patchEntity($event, $this->request->getData());

            $event->active = true;

            if ($this->Events->save($event)) {

                $this->Flash->success(__('The event has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The article could not be saved. Please, try again.'));
        }
        $citys = $this->Events->City->find('list', [    'valueField' => 'name'
        ]);
        $this->set(compact('event', 'citys'));
    }


    public function joinEvent(){

        $this->loadModel('UsersEvents');
        $this->loadModel('Events');
        $this->loadModel('Users');


        $userEvent = $this->UsersEvents->newEntity();

        if ($this->request->is('post')) {
            $userEvent = $this->UsersEvents->patchEntity($userEvent, $this->request->getData());

            $userEvent->user_id=$this->User->id;

            if ($this->UsersEvents->save($userEvent)) {

                $this->Flash->success(__('you are in'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('Could not be saved. Please, try again.'));
        }

        $this->set(compact('userEvent'));


    }
    /**
     * Edit method
     *
     * @param string|null $id Event id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $event = $this->Events->get($id, [
            'contain' => ['Users']
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $event = $this->Events->patchEntity($event, $this->request->getData());
            if ($this->Events->save($event)) {
                $this->Flash->success(__('The event has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The event could not be saved. Please, try again.'));
        }
        $photos = $this->Events->Photos->find('list', ['limit' => 200]);
        $users = $this->Events->Users->find('list', ['limit' => 200]);
        $this->set(compact('event', 'photos', 'users'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Event id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $event = $this->Events->get($id);
        if ($this->Events->delete($event)) {
            $this->Flash->success(__('The event has been deleted.'));
        } else {
            $this->Flash->error(__('The event could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
